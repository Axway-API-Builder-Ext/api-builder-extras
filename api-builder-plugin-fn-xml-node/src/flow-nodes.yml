flow-nodes:
  xml-node:
    name: XML
    icon: xml-node-icon.png
    description: 'Provides support to handle XML-Payload. To learn more please read: https://github.com/nashwaan/xml-js'
    category: Utils
    methods:
      xml2json:
        name: XML to JSON
        description: 'Converts XML payload into JSON data. To learn more please read: https://github.com/nashwaan/xml-js'
        parameters:
          xmlData:
            name: XML Input data
            description: 'XML Data. For instance: $.soapResponse.body'
            required: true
            schema:
              type: string
          asString:
            name: As string
            description: Encode the JSON response as a String. Defaults to false.
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
          selectPath:
            name: Select object with path
            description: "Select the object within the returned structure using this path. Example: $[\"soap:Envelope\"][\"soap:Body\"]. If you remove namespaces, remember to also remove them here."
            required: false
            initialType: string
            schema:
              type: string
          removeAllNamespaces:
            name: Remove all namespaces
            description: 'This will remove all namespaces from the JSON-message. Overrides Remove Specific Namespaces.'
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
          removeNamespaces:
            name: Remove specific namespaces
            description: 'An Array of namespaces to be removed from the JSON-Message. Example: ["v1"] will convert the following: "<v1:radius_airportsResponse>" into "radius_airportsResponse": {'
            required: false
            initialType: array
            schema:
              type: array
          ignoreCdata:
            name: Ignore CDATA
            description: Whether to ignore parsing CData of the elements. That is, no cdata will be generated.
            group: Advanced
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
          nativeBooleans:
            name: Native booleans
            description: Whether to attempt converting boolean strings to native booleans. For example "true" will be true.
            group: Advanced
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
        returns:
          name: Next
          description: Created JSON data
          context: $.jsonData
          schema: 
            oneOf: [
              { type: 'string' },
              { type: 'object' }
            ]
        throws:
          name: Error
          description: Failed to create JSON-String / JS-Object
          context: $.error
          schema:
            type: object
            properties:
              message:
                type: string

      json2xml:
        name: JSON to XML
        description: 'Converts JSON payload into XML. To learn more please read: https://github.com/nashwaan/xml-js'
        parameters:
          jsonData:
            name: JSON Input data
            description: 'JSON Data.'
            required: true
            schema: 
              oneOf: [
                { type: 'string' },
                { type: 'object' }
              ]
          asString:
            name: As string
            description: Wether return the generated JSON as a String or as an Object. By default a Javascript Object is returned.
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
          spaces:
            name: Spaces
            description: 'Number of spaces to be used for indenting XML output. Passing characters like " " or "\t" are also accepted.'
            required: false
            initialType: number
            schema:
              default: 0
              oneOf:
                - type: number
                - type: string
          compact:
            name: Compact
            description: 'Whether the input object is in compact form or not. By default, input is expected to be in compact form. IMPORTANT: Remember to set this option compact: false if you are supplying non-compact json.'
            required: false
            initialType: boolean
            schema:
              default: true
              type: boolean
          declaration:
            name: Declaration
            description: 'XML declaration attributes to use. For instance { "version": "1.0",  "encoding": "utf-8" }. The XML-Declaration might also be provided using the attribute _declaration in your JSON-Data.'
            required: false
            initialType: object
            schema:
              type: object
          fullTagEmptyElement:
            name: Full tag empty element
            description: 'Whether to produce element without sub-elements as full tag pairs <a></a> rather than self closing tag <a/>'
            group: Advanced
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
          indentCdata:
            name: Indent CDATA
            description: 'Whether to write CData in a new line and indent it. Will generate <a>\n <![CDATA[foo]]></a> instead of <a><![CDATA[foo]]></a>'
            group: Advanced
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
          indentAttributes:
            name: Indent attributes
            description: 'Whether to print attributes across multiple lines and indent them (when spaces is not 0)'
            group: Advanced
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
          ignoreDeclaration:
            name: Ignore declaration
            description: 'Whether to ignore writing declaration directives of xml. For example, <?xml?> will be ignored.'
            group: Advanced
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
          ignoreInstruction:
            name: Ignore instruction
            description: 'Whether to ignore writing processing instruction of xml. For example, <?go there?> will be ignored.'
            group: Advanced
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
          ignoreComment:
            name: Ignore comment
            description: 'Whether to ignore writing comments of the elements. That is, no <!-- --> will be generated.'
            group: Advanced
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
          ignoreCdata:
            name: Ignore CDATA
            description: 'Whether to ignore writing CData of the elements. That is, no <![CDATA[ ]]> will be generated.'
            group: Advanced
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
          ignoreDoctype:
            name: Ignore doctype
            description: 'Whether to ignore writing Doctype of the elements. That is, no <!DOCTYPE > will be generated.'
            group: Advanced
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
          ignoreText:
            name: Ignore text
            description: 'Whether to ignore writing texts of the elements. For example, hi text in <a>hi</a> will be ignored.'
            group: Advanced
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
        returns:
          name: Next
          description: Created XML data
          context: $.xmlData
          schema: 
            oneOf: [
              { type: 'string' },
              { type: 'object' }
            ]
        throws:
          name: Error
          description: Failed to create JSON-String / JS-Object
          context: $.error
          schema:
            type: object
            properties:
              message:
                type: string