flow-nodes:
  fn-mongodb:
    name: MongoDB 
    icon: mongodb-icon.png
    description: With the MongoDB Flow-Node plugin you can access a MongoDB without using a model in the API builder. You can use it to set data and read it accordingly.
    category: general
    methods:
      insert: 
        name: Insert
        description: 'Inserts one or many documents into your MongoDB. So you can use it to write a JSON structure directly from the flow context to the Mongo DB. For example via a selector like $.params.body'
        parameters:
          documents:
            name: Documents
            description: 'A single document to insert: { "a": "1" } or an Array of documents [{ "a": "1" }, { "a": "2" }, { "a": "3" }]. Typically, you do not specify the documents manually, rather you use an appropriate selector such as $.params.body'
            required: true
            schema:
              oneOf:
                - type: array
                  items:
                    type: object
                - type: object
          collectionName:
            name: Collection
            description: 'You may override the collection for this operation by providing a different collection name.'
            group: Advanced
            required: false
            initialType: string
            schema:
              type: string
        returns:
          name: Next
          description: Returns the inserted document
          context: $.insertResult
          schema:
            oneOf:
              - type: array
                items:
                  type: object
              - type: object
        throws:
          name: Error
          description: An unexpected error was encountered.
          context: $.error
          schema:
            type: object
            properties:
              message:
                type: string

      find: 
        name: Find
        description: 'Find a single or a number of documents'
        parameters:
          filter:
            name: Filter
            description: 'Filter documents. For example: { "a": "3" } or using given data: { "a": "${myProp.mySubProp}" }. If no filter is a given all documents are returned.'
            required: false
            initialType: object
            schema:
              type: object
          limit:
            name: Limit
            description: 'Sets the limit of documents returned in the query'
            required: false
            initialType: number
            schema:
              type: number
          skip:
            name: Skip
            description: 'Set to skip N documents ahead in your query (useful for pagination).'
            required: false
            initialType: number
            schema:
              type: number
          data:
            name: Data
            description: 'This data can be used in the filter statement. For example, if you specify as Data: $.params, which among other things contains the query parameters, then you can access them in the filter with the following statement: ${myQueryParam}. Alternatively you could use: $ and then in the filter: ${params.myQueryParam}'
            required: false
            schema:
              type: object
          collectionName:
            name: Collection
            description: 'You may override the collection for this operation by providing a different collection name.'
            group: Advanced
            required: false
            initialType: string
            schema:
              type: string
        outputs:
          next:
            name: Next
            description: Returns the filtered documents
            context: $.findResult
            schema:
              type: array
              items:
                type: object
          noMatch:
            name: No Match
            description: Empty result set returned
            context: $.findResult
            schema:
              type: array
              items:
                type: object
          error:
            name: Error
            description: An unexpected error was encountered.
            context: $.error
            schema:
              type: string

      update: 
        name: Update
        description: 'Updates one or multiple documents'
        parameters:
          update:
            name: Update
            description: 'The update instruction. For example: { "$set": { "b": "1" } } or  a more complex example using given data: {"$push": { "orderStatus": "${body}"}}'
            required: true
            initialType: object
            schema:
              type: object
          filter:
            name: Filter
            description: 'By default all documents are updated that matches to the given filter. For example: { "a": "3" } or using given data filtering on a specific ID: { "_id": "${givenId}" }'
            required: true
            initialType: object
            schema:
              type: object
          updateOnlyOne:
            name: Update only one
            description: If set to true, only one document will be updated. If multiple documents matches the flow-node will fail. 
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
          data:
            name: Data
            description: 'This data can be used in the filter and update statement. For example, if you specify as Data: $.params, which among other things contains the query parameters, then you can access them in the filter with the following statement: ${myQueryParam}. Alternatively you could use: $ and then in the filter: ${params.myQueryParam}'
            required: false
            schema:
              type: object
          collectionName:
            name: Collection
            description: 'You may override the collection for this operation by providing a different collection name.'
            group: Advanced
            required: false
            initialType: string
            schema:
              type: string
          failOnNoMatch:
            name: Fail on no match
            description: If set to true, the flow node fails, if the update had no match. 
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
        outputs:
          next:
            name: Next
            description: Returns the filtered documents
            context: $.updateResult
            schema:
              type: object
          noMatch:
            name: No Match
            description: Used if no document has been updated
            context: $.message
            schema:
              type: string
          error:
            name: Error
            description: An unexpected error was encountered.
            context: $.error
            schema:
              type: string

      mongoDelete: 
        name: Delete
        description: 'Removes one or mutliples documents based on the given filter'
        parameters:
          filter:
            name: Filter
            description: 'The method deletes all documents where the given filter matches. For example: { "a": "3" } or using given data filtering on a specific ID: { "_id": "${givenId}" }'
            required: true
            initialType: object
            schema:
              type: object
          data:
            name: Data
            description: 'This data can be used in the filter statement. For example, if you specify as Data: $.params, which among other things contains the query parameters, then you can access them in the filter with the following statement: ${myQueryParam}. Alternatively you could use: $ and then in the filter: ${params.myQueryParam}'
            required: false
            schema:
              type: object
          collectionName:
            name: Collection
            description: 'You may override the collection for this operation by providing a different collection name.'
            group: Advanced
            required: false
            initialType: string
            schema:
              type: string
          deleteOnlyOne:
            name: Delete only one
            description: If set to true, only one document will be deleted. If multiple documents matches the flow-node will fail. 
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
          failOnNoMatch:
            name: Fail on no match
            description: If set to true, the flow node fails, if the delete operation had no match. 
            required: false
            initialType: boolean
            schema:
              default: false
              type: boolean
        outputs:
          next:
            name: Next
            description: Returns the delete result information
            context: $.deleteResult
            schema:
              type: object
          noMatch:
            name: No Match
            description: Used if no document has been deleted
            context: $.message
            schema:
              type: string
          error:
            name: Error
            description: An unexpected error was encountered.
            context: $.error
            schema:
              type: string
                
      countDocuments: 
        name: Count Documents
        description: 'Gets the number of documents matching the filter.'
        parameters:
          filter:
            name: Filter
            description: 'Document count is returned based based on this filter. For example: { "a": "3" } or using given data filtering on a specific ID: { "_id": "${givenId}" }. If no given all documents are counted.'
            required: false
            initialType: object
            schema:
              type: object
          data:
            name: Data
            description: 'This data can be used in the filter statement. For example, if you specify as Data: $.params, which among other things contains the query parameters, then you can access them in the filter with the following statement: ${myQueryParam}. Alternatively you could use: $ and then in the filter: ${params.myQueryParam}'
            required: false
            schema:
              type: object
          collectionName:
            name: Collection
            description: 'You may override the collection for this operation by providing a different collection name.'
            group: Advanced
            required: false
            initialType: string
            schema:
              type: string
        outputs:
          next:
            name: Next
            description: Returns the number of documents
            context: $.deleteResult
            schema:
              type: object
          noMatch:
            name: No Match
            description: Used if no document has been deleted
            context: $.message
            schema:
              type: string
          error:
            name: Error
            description: An unexpected error was encountered.
            context: $.error
            schema:
              type: string