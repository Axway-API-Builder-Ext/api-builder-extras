/**
 * Creates a new Model or Collection object.
 * @param {APIBuilder.Model} Model The model class being updated.
 * @param {Object} [values] Attributes to set on the new model(s).
 * @param {Function} callback Callback passed an Error object (or null if successful),
 * 		and the new model or collection.
 * @throws {Error}
 */
exports.create = function (Model, values, callback) {
	const table = this.getTableName(Model);
	const payload = Model.instance(values, false).toPayload();
	const primaryKeyColumn = this.getPrimaryKeyColumn(Model);
	const isAutogenerated = this.getAutogenerated(Model);
	const columns = this.fetchColumns(table, payload);
	const placeholders = columns.map(this.returnPlaceholder);
	const data = Object.values(payload);
	let query;

	if (!primaryKeyColumn) {
		query = `INSERT INTO ${this.escapeKeys([ table ])[0]} (${this.escapeKeys(columns).join(',')}) VALUES (${placeholders.join(',')})`;
	} else if (!isAutogenerated) {
		data.unshift(values[primaryKeyColumn]);
		placeholders.push('?');
		/* eslint-disable */
		query = 'INSERT INTO ' + this.escapeKeys([ table ])[0] + ' (' + primaryKeyColumn + ',' + this.escapeKeys(columns).join(',') + ') VALUES (' + placeholders.join(',') + ')';
	} else {
		/* eslint-disable */
		query = 'INSERT INTO ' + this.escapeKeys([ table ])[0] + ' (' + this.escapeKeys(columns).join(',') + ') VALUES (' + placeholders.join(',') + ')';
	}

	this._query(query, data, callback, (result) => {
		const instance = Model.instance(values);
		const primaryKey = primaryKeyColumn && this.metadata.schema.objects[table][primaryKeyColumn];
		if (primaryKey) {
			if (isAutogenerated) {
				instance.setPrimaryKey(result.insertId);
			} else {
				instance.setPrimaryKey(values[primaryKeyColumn]);
			}
		}
		callback(null, instance);
	});
};
