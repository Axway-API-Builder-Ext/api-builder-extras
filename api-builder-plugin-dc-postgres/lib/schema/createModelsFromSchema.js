
const APIBuilder = require('@axway/api-builder-runtime');
const _ = require('lodash');
const semver = require('semver');

/**
 * Creates models from your schema (see "fetchSchema" for more information on the schema).
 */
exports.createModelsFromSchema = function () {
	const self = this;
	const models = {};
	// TODO: Delete this check and bump the runtime peer dependency when we
	// major bump.
	const legacyVersion = semver.lte(APIBuilder.Version, '4.17.3');

	/**
	*Returns model's primary key column's name
	*@param {string} modelName - name of model - name of model
	*@returns {string}
	*/
	function getPrimaryKeyFromSchema(modelName) {
		return self.schema.primary_keys[modelName];
	}

	/**
	*Returns model's primary key is auto increment
	*@param {string} modelName - name of model - name of model
	*@param {string} primaryKeyColumnName - name of primaryKeyColumnName
	*@returns {object}
	*/
	function getPrimaryKeyDetails(modelName, primaryKeyColumnName) {
		return {
			autogenerated: self.schema.objects[modelName][primaryKeyColumnName].identity_increment > -1,
			type: self.convertDataTypeToJSType(
				self.schema.objects[modelName][primaryKeyColumnName].data_type
			).name.toLowerCase()
		};
	}

	/**
	* Get model fields except the primaryKey field
	* @param {string} modelName - name of model - name of model
	* @param {Object} modelSchema - schema
	* @returns {Object}
	*/
	function getFieldsExceptPrimaryKey(modelName, modelSchema) {
		return Object.keys(modelSchema)
			.filter((fieldName) => {
				const primaryKeyColumnName = getPrimaryKeyFromSchema(modelName);
				if (primaryKeyColumnName !== undefined && fieldName === primaryKeyColumnName) {
					return false;
				}

				// TODO: Delete this check and bump the runtime peer dependency
				// when we major bump.
				// Older versions of API Builder will fail to start if there is
				// a field called 'id'.
				if (legacyVersion && fieldName === 'id') {
					return false;
				}

				return true;
			})
			.reduce((fields, fieldName) => {
				fields[fieldName] = {
					type: self.convertDataTypeToJSType(modelSchema[fieldName].data_type),
					required: modelSchema[fieldName].is_nullable === 'NO'
				};

				return fields;
			}, {});
	}

	/**
	* Generate APIBuilder Model base on model name and fields
	* @param {string} modelName - name of model
	* @param {Object} fields - model fields
	* @returns {Object} model generated
	*/
	function generateModel(modelName, fields) {
		const primaryKeyColumnName = getPrimaryKeyFromSchema(modelName);

		const modelInfo = {
			name: `${self.name}/${modelName}`,
			autogen: !!self.config.modelAutogen,
			fields,
			connector: self,
			generated: true,
			disabledActions: [ 'findAndModify' ]
		};

		if (primaryKeyColumnName !== undefined) {
			modelInfo.metadata = {
				primarykey: primaryKeyColumnName,
				primaryKeyDetails: getPrimaryKeyDetails(modelName, primaryKeyColumnName)
			};
		} else {
			// No primary key
			modelInfo.metadata = {
				primarykey: null
			};
		}

		return APIBuilder.Model.extend(`${self.name}/${modelName}`, modelInfo);
	}

	// Generate models based on schema objects
	Object.keys(this.schema.objects).forEach((modelName) => {
		const object = this.schema.objects[modelName];

		const fields = getFieldsExceptPrimaryKey(modelName, object);
		models[`${this.name}/${modelName}`] = generateModel(modelName, fields);
	});

	this.models = _.defaults(this.models || {}, models);
};
